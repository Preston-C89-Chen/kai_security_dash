// src/components/charts/VulnerabilityMarimekko.tsx
import React, { useMemo } from 'react'
import ReactECharts from 'echarts-for-react'
import { FlattenedVulnerability } from '@/features/vulnerabilities/types'

type Props = {
  data: FlattenedVulnerability[]
}

const VulnerabilityMarimekko: React.FC<Props> = ({ data }) => {
  const chartData = useMemo(() => {
    const severityGroups: Record<string, Record<string, number>> = {}

    data.forEach((vuln) => {
      const severity = vuln.severity || 'unknown'
      const kaiStatus = vuln.kaiStatus || 'none'

      if (!severityGroups[severity]) {
        severityGroups[severity] = {}
      }
      if (!severityGroups[severity][kaiStatus]) {
        severityGroups[severity][kaiStatus] = 0
      }
      severityGroups[severity][kaiStatus] += 1
    })

    const severities = Object.keys(severityGroups)
    const kaiStatuses = Array.from(
      new Set(data.map((v) => v.kaiStatus || 'none'))
    )

    const total = data.length
    const widthRatios = severities.map((sev) =>
      Object.values(severityGroups[sev]).reduce((a, b) => a + b, 0)
    )

    const seriesData = kaiStatuses.map((kaiStatus) => {
      return {
        name: kaiStatus,
        type: 'bar',
        stack: 'total',
        emphasis: { focus: 'series' },
        data: severities.map(
          (sev) => severityGroups[sev]?.[kaiStatus] || 0
        ),
      }
    })

    return {
      severities,
      seriesData,
      widthRatios,
    }
  }, [data])

  const option = {
    title: {
      text: 'Vulnerability Distribution',
      left: 'center',
    },
    tooltip: {
      trigger: 'axis',
      axisPointer: {
        type: 'shadow',
      },
    },
    legend: {
      top: 30,
    },
    xAxis: {
      type: 'category',
      data: chartData.severities,
      axisLabel: { rotate: 45 },
    },
    yAxis: {
      type: 'value',
    },
    series: chartData.seriesData,
  }

  return <ReactECharts option={option} style={{ height: 400 }} />
}

export default VulnerabilityMarimekko
