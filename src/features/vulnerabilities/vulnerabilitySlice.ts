import { createSlice, PayloadAction } from '@reduxjs/toolkit'
import { Vulnerability, VulnerabilityRoot } from './types'
import { flattenVulnerabilities } from './utils'

interface VulnerabilityState {
  raw: VulnerabilityRoot | null
  flattened: Vulnerability[]
  selectedSeverity: string[]
}

const initialState: VulnerabilityState = {
  raw: null,
  flattened: [],
  selectedSeverity: []
}

const vulnerabilitySlice = createSlice({
  name: 'vulnerabilities',
  initialState,
  reducers: {
    setRawData(state, action: PayloadAction<VulnerabilityRoot>) {
      state.raw = action.payload
      const allVulns: Vulnerability[] = flattenVulnerabilities(state.raw)
      state.flattened = allVulns
    },
    setSelectedSeverity(state, action: PayloadAction<string[]>) {
      state.selectedSeverity = action.payload
    },
    appendFlattenedData(state, action: PayloadAction<Vulnerability[]>) {
      state.flattened.push(...action.payload)
    }
  }
})

export const { setRawData, setSelectedSeverity, appendFlattenedData } = vulnerabilitySlice.actions
export default vulnerabilitySlice.reducer